(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[634],{8332:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=t(2122),r=t(9756),s=(t(7294),t(3905)),o=["components"],i={title:"Series - String"},l=void 0,p={unversionedId:"Series/seriesstr",id:"Series/seriesstr",isDocsHomePage:!1,title:"Series - String",description:"SeriesSTR is a Series where the type of the vector is SeriesVector and the Series name is a string.",source:"@site/docs/02-Series/04-seriesstr.md",sourceDirName:"02-Series",slug:"/Series/seriesstr",permalink:"/entropy/docs/Series/seriesstr",version:"current",sidebarPosition:4,frontMatter:{title:"Series - String"},sidebar:"tutorialSidebar",previous:{title:"Series - Float",permalink:"/entropy/docs/Series/seriesf64"},next:{title:"Dataframes Quick Start",permalink:"/entropy/docs/dataframes"}},d=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]}],m={toc:d};function c(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR")," is a Series where the type of the vector is ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesVector")," and the Series name is a string."),(0,s.kt)("p",null,"The following scripts assume that you have imported the ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR")," object\nfrom the package and set up the threads as explained in ",(0,s.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Use ",(0,s.kt)("inlineCode",{parentName:"p"},".display")," on ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"SeriesSTR"))," to view the Series."),(0,s.kt)("p",{parentName:"div"},"Use ",(0,s.kt)("inlineCode",{parentName:"p"},".data")," on ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"SeriesSTR"))," to view ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"SeriesVector"))," of the Series."))),(0,s.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,s.kt)("p",null,"These methods are used to create new ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create an SeriesSTR from a given JavaScript array\n    let s = new SeriesSTR("Fruits", ["Apples", "Oranges", "Mangoes", "Banana"]);\n    console.log(s.display); \n    /*\n    ################\n    # Fruits       #\n    ################\n    # "Apples"     #\n    # "Oranges"    #\n    # "Mangoes"    #\n    # "Banana"     #\n    ################\n    */\n')),(0,s.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,s.kt)("p",null,"Some handy methods to work with the Series."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Return Json representation of Series\n    let s = new SeriesSTR("Fruits", ["Apples", "Oranges", "Mangoes", "Banana"]);\n    console.log(s.toJson());\n    // { name: "Fruits", data: Array(4)}\n\n// Return String Series Representation\n    console.log(s.display)\n    /*\n    ################\n    # Fruits       #\n    ################\n    # "Apples"     #\n    # "Oranges"    #\n    # "Mangoes"    #\n    # "Banana"     #\n    ################\n    */\n\n// Return SeriesVector of Series\n    console.log(s.data())\n    // ["Apples", "Oranges", "Mangoes", "Banana"]\n')),(0,s.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,s.kt)("p",null,"Basic getters and setters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create an SeriesSTR from a given JavaScript array\n    let s = new SeriesSTR("Fruits", ["Apples", "Oranges", "Mangoes", "Banana"]);\n\n// Get the length of the array\n    console.log(s.len()); \n    // 4\n\n// Set the given value at the specified index\n    s.set(0, "Watermelon"); \n    // ["Watermelon", "Oranges", "Mangoes", "Banana"]\n    console.log(s.display) \n    // Use to view Series in console\n\n// Get the value at the specified index\n    console.log(s.get(2));\n    // Mangoes\n\n// Swap the values at the specified indices\n    s.swap(0, 1); \n    // ["Oranges", "Watermelon", "Mangoes", "Banana"] \n    console.log(s.display); \n    // Use to view Series in console\n')),(0,s.kt)("p",null,"More complex methods used to manipulate the ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR"),'. Each of these\nmethods has two versions. The "pure" version returns the result of performing\nthe operation while the "impure" version actually changes the ',(0,s.kt)("inlineCode",{parentName:"p"},"SeriesVector"),"."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Pure"),(0,s.kt)("th",{parentName:"tr",align:null},"Impure"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"reverse"),(0,s.kt)("td",{parentName:"tr",align:null},"reversed")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"append"),(0,s.kt)("td",{parentName:"tr",align:null},"appended")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"extend"),(0,s.kt)("td",{parentName:"tr",align:null},"extended")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"insert"),(0,s.kt)("td",{parentName:"tr",align:null},"inserted")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"splice"),(0,s.kt)("td",{parentName:"tr",align:null},"spliced")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create an SeriesSTR from a given JavaScript array\n    let s = new SeriesSTR("Fruits", ["Apples", "Oranges", "Mangoes", "Banana"]);\n\n// Reverse the Series Data\n    s.reverse(); \n    // ["Banana", "Mangoes", "Oranges", "Apples"] (without return)\n    console.log(s.reversed().data); \n    // ["Banana", "Mangoes", "Oranges", "Apples"]\n\n// Append an element to the Series\n    s.append("Watermelon"); \n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon"] (without return)\n    console.log(s.appended(33).data) \n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon"]\n\n// Extend the SeriesVector with another\n    s.extend(["Cherry", "Strawberry"]); \n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon", "Cherry", "Strawberry"] (without return)   \n    console.log(s.extended([55, 55]).data); \n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon", "Cherry", "Strawberry"]\n\n// Insert the given element at the specified index\n    s.insert(0, "Peaches"); \n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon", "Cherry", "Strawberry", "Peaches"] \n    // (without return)\n    console.log(s.inserted(0, 11).data);\n    // ["Apples", "Oranges", "Mangoes", "Banana", "Watermelon", "Cherry", "Strawberry", "Peaches"]\n\n// Removes an element from the specified index\n    console.log(s.splice(2)); \n    // "Mangoes"\n\n// Remove the value at the specified index and return the array\n    console.log(s.spliced(4)[0].data);\n    // ["Apples", "Oranges", "Banana", "Watermelon", "Strawberry", "Peaches"]\n')))}c.isMDXComponent=!0}}]);