(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[551],{878:function(e,a,n){"use strict";n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return m},toc:function(){return d},default:function(){return c}});var t=n(2122),o=n(9756),s=(n(7294),n(3905)),r=["components"],l={title:"Dataframes"},i=void 0,m={unversionedId:"Dataframes/dataframes",id:"Dataframes/dataframes",isDocsHomePage:!1,title:"Dataframes",description:"The following scripts assume that you have imported the ColumnType,  SeriesI32,  SeriesF64,  SeriesSTR,  Dataframe object",source:"@site/docs/03-Dataframes/03-dataframes.md",sourceDirName:"03-Dataframes",slug:"/Dataframes/dataframes",permalink:"/entropy/docs/Dataframes/dataframes",version:"current",sidebarPosition:3,frontMatter:{title:"Dataframes"},sidebar:"tutorialSidebar",previous:{title:"Import CSV data",permalink:"/entropy/docs/Dataframes/import"}},d=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]},{value:"Math Methods",id:"math-methods",children:[]}],p={toc:d};function c(e){var a=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The following scripts assume that you have imported the ",(0,s.kt)("inlineCode",{parentName:"p"},"ColumnType"),",  ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesI32"),",  ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesF64"),",  ",(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR"),",  ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataframe")," object\nfrom the package as explained in ",(0,s.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,s.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,s.kt)("p",null,"These methods are used to create new ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataframe"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create a Dataframe from Series\n    let s1 = new SeriesI32("Apple", [1, 2, 3, 4]);\n    let s2 = new SeriesF64("Orange", [1.1, 2.1, 3.1, 4.1]);\n    let s3 = new SeriesSTR("Banana", ["ba", "na", "na", "na"]);\n\n    let df = new DataFrame([s1.toJson(), s2.toJson(), s3.toJson()]);\n    console.table(df.displayTable);\n\n// Create a Dataframe from csv\n    let file = await fetch("../data/fruits.csv");\n    let df = await readcsv(file);\n')),(0,s.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,s.kt)("p",null,"Some handy methods to work with the Dataframes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Display Dataframe\n    console.table(df.displayTable);\n\n// Display Dataframe as String\n    console.log(df.display);\n")),(0,s.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,s.kt)("p",null,"Dataframe getters and setters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Construct Dataframe\n    let file = await fetch("../data/fruits.csv");\n    let df = await readcsv(file);\n\n// Get Dataframe column types\n    console.log(df.columns());    \n    // {"Orange" => "FLOAT", "Banana" => "STR", "Apple" => "INTEGER"}\n\n// Get number of rows\n    console.log(df.rowsCount());\n    // 4\n\n// Get number of columns\n    console.log(df.columnsCount());\n    // 3\n\n// Get Dataframe column names\n    console.log(df.columns());  \n    // ["Apple", "Orange", "Banana"]\n')),(0,s.kt)("p",null,"Additional Methods for ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataframe")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Create a Dataframe from Series\n    let s1 = new SeriesI32("Apple", [1, 2, 3, 4]);\n    let s2 = new SeriesF64("Orange", [1.1, 2.1, 3.1, 4.1]);\n    let s3 = new SeriesSTR("Banana", ["ba", "na", "na", "na"]);\n\n    let df = new DataFrame([s1.toJson(), s2.toJson(), s3.toJson()]);\n\n// Append new Series\n    let s4 = new SeriesI32("Fruits", [9, 8, 9, 8]);\n    df.append(ColumnType.INTEGER, sertest.toJson());\n    console.log(df.display); // String output\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"While appending new ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Series"))," to ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Dataframe")),", you have to specify the type via ",(0,s.kt)("inlineCode",{parentName:"p"},"ColumnType.Integer"),",  ",(0,s.kt)("inlineCode",{parentName:"p"},"ColumnType.Float"),"  or  ",(0,s.kt)("inlineCode",{parentName:"p"},"ColumnType.String"),"."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Get Series with column name\n    console.log(df.loc("Banana")); \n    // String output\n\n// Get Dataframe row\n    console.log(df.ilocr(2)); \n    // [3, 3.1, "na"]\n\n// Get Dataframe column\n    console.log(df.ilocc(1));\n    // [1.1, 2.1, 3.1, 4.1]\n')),(0,s.kt)("h2",{id:"math-methods"},"Math Methods"),(0,s.kt)("p",null,"Methods to perform simple mathematical operations on the Dataframe."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Get minimun of all columns\n    console.log(df.minColumns());\n    // {"Fruits" => 8, "Apple" => 1, "Orange" => 1.1}\n\n// Get maximum of all columns\n    console.log(df.maxColumns());\n    // {"Fruits" => 9, "Apple" => 4, "Orange" => 4.1}\n// Get mean of all columns\n    console.log(df.meanColumns());\n    // {"Apple" => 2.5, "Fruits" => 8.5, "Orange" => 2.6}\n\n// Get median of all columns\n    console.log(df.medianColumns());\n    // {"Apple" => 2.5, "Orange" => 2.6, "Fruits" => 8.5}\n\n// Get varience of all columns params (degree_of_freedom)\n    console.log(df.varianceColumns(1));\n    // {"Apple" => 2, "Orange" => 1.666666666666666, "Fruits" => 0.6666666666666666}\n\n// Get variance of Dataframe column params (column_name, degree_of_freedom)\n    console.log(df.variance("Apple", 1));\n    // 2\n\n// Get standard deviation of Dataframe params (degree_of_freedom)\n    console.log(df.standardDeviationColumns(1));\n    // {"Orange" => 1.2909944487358054, "Fruits" => 0.816496580927726, "Apple" => 1.4142135623730951}\n\n// Get standard deviation of Dataframe column params (column_name, degree_of_freedom)\n    console.log(df.standardDeviation("Orange", 1));\n    // 1.2909944487358054\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"SeriesSTR")," columns are not taken into account while performing math methods"))))}c.isMDXComponent=!0}}]);